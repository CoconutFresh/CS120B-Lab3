
gbers002_bzhan014_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082e  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000795  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000278  00000000  00000000  0000119f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2c c0       	rjmp	.+88     	; 0xf4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
			}
			else if (PINA >= 3) {
				PORTC = 0x43;
			}
			else if (PINA >= 1) {
				PORTC = 0x41;
  a8:	71 e4       	ldi	r23, 0x41	; 65
			}
			else if (PINA >= 5) {
				PORTC = 0x07;
			}
			else if (PINA >= 3) {
				PORTC = 0x43;
  aa:	63 e4       	ldi	r22, 0x43	; 67
			}
			else if (PINA >= 7) {
				PORTC = 0x0F;
			}
			else if (PINA >= 5) {
				PORTC = 0x07;
  ac:	57 e0       	ldi	r21, 0x07	; 7
			}	
			else if (PINA >= 10) {
				PORTC = 0x1F;
			}
			else if (PINA >= 7) {
				PORTC = 0x0F;
  ae:	4f e0       	ldi	r20, 0x0F	; 15
		for (unsigned char i = 0; i < 8; i++) {
			if (PINA >= 13) {
				PORTC = 0x3F;
			}	
			else if (PINA >= 10) {
				PORTC = 0x1F;
  b0:	3f e1       	ldi	r19, 0x1F	; 31
	DDRC = 0xFF; PORTC = 0x00;
    while (1) 
    {
		for (unsigned char i = 0; i < 8; i++) {
			if (PINA >= 13) {
				PORTC = 0x3F;
  b2:	2f e3       	ldi	r18, 0x3F	; 63
 */

#include <avr/io.h>

int main(void)
{
  b4:	88 e0       	ldi	r24, 0x08	; 8
	DDRA = 0x00; PORTA = 0xFF;
	DDRC = 0xFF; PORTC = 0x00;
    while (1) 
    {
		for (unsigned char i = 0; i < 8; i++) {
			if (PINA >= 13) {
  b6:	90 b1       	in	r25, 0x00	; 0
  b8:	9d 30       	cpi	r25, 0x0D	; 13
  ba:	10 f0       	brcs	.+4      	; 0xc0 <main+0x22>
				PORTC = 0x3F;
  bc:	28 b9       	out	0x08, r18	; 8
  be:	17 c0       	rjmp	.+46     	; 0xee <main+0x50>
			}	
			else if (PINA >= 10) {
  c0:	90 b1       	in	r25, 0x00	; 0
  c2:	9a 30       	cpi	r25, 0x0A	; 10
  c4:	10 f0       	brcs	.+4      	; 0xca <main+0x2c>
				PORTC = 0x1F;
  c6:	38 b9       	out	0x08, r19	; 8
  c8:	12 c0       	rjmp	.+36     	; 0xee <main+0x50>
			}
			else if (PINA >= 7) {
  ca:	90 b1       	in	r25, 0x00	; 0
  cc:	97 30       	cpi	r25, 0x07	; 7
  ce:	10 f0       	brcs	.+4      	; 0xd4 <main+0x36>
				PORTC = 0x0F;
  d0:	48 b9       	out	0x08, r20	; 8
  d2:	0d c0       	rjmp	.+26     	; 0xee <main+0x50>
			}
			else if (PINA >= 5) {
  d4:	90 b1       	in	r25, 0x00	; 0
  d6:	95 30       	cpi	r25, 0x05	; 5
  d8:	10 f0       	brcs	.+4      	; 0xde <main+0x40>
				PORTC = 0x07;
  da:	58 b9       	out	0x08, r21	; 8
  dc:	08 c0       	rjmp	.+16     	; 0xee <main+0x50>
			}
			else if (PINA >= 3) {
  de:	90 b1       	in	r25, 0x00	; 0
  e0:	93 30       	cpi	r25, 0x03	; 3
  e2:	10 f0       	brcs	.+4      	; 0xe8 <main+0x4a>
				PORTC = 0x43;
  e4:	68 b9       	out	0x08, r22	; 8
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x50>
			}
			else if (PINA >= 1) {
  e8:	90 b1       	in	r25, 0x00	; 0
  ea:	91 11       	cpse	r25, r1
				PORTC = 0x41;
  ec:	78 b9       	out	0x08, r23	; 8
  ee:	81 50       	subi	r24, 0x01	; 1
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRC = 0xFF; PORTC = 0x00;
    while (1) 
    {
		for (unsigned char i = 0; i < 8; i++) {
  f0:	11 f7       	brne	.-60     	; 0xb6 <main+0x18>
  f2:	e0 cf       	rjmp	.-64     	; 0xb4 <main+0x16>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
