
gbers002_bzhan014_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ec  00000000  00000000  00000ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  000012d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	36 c0       	rjmp	.+108    	; 0x108 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	
    while (1) 
    {
			count = 0x00;
			
			if (PINA >= 13) {
  a8:	80 b1       	in	r24, 0x00	; 0
  aa:	8d 30       	cpi	r24, 0x0D	; 13
  ac:	08 f0       	brcs	.+2      	; 0xb0 <main+0x12>
				PORTC = SetBit(PORTC, 5, 1);
  ae:	45 9a       	sbi	0x08, 5	; 8
			}	
			if (PINA >= 10) {
  b0:	80 b1       	in	r24, 0x00	; 0
  b2:	8a 30       	cpi	r24, 0x0A	; 10
  b4:	08 f0       	brcs	.+2      	; 0xb8 <main+0x1a>
				PORTC = SetBit(PORTC, 4, 1);
  b6:	44 9a       	sbi	0x08, 4	; 8
			}
			if (PINA >= 7) {
  b8:	80 b1       	in	r24, 0x00	; 0
  ba:	87 30       	cpi	r24, 0x07	; 7
  bc:	08 f0       	brcs	.+2      	; 0xc0 <main+0x22>
				PORTC = SetBit(PORTC, 3, 1);
  be:	43 9a       	sbi	0x08, 3	; 8
			}
			if (PINA >= 5) {
  c0:	80 b1       	in	r24, 0x00	; 0
  c2:	85 30       	cpi	r24, 0x05	; 5
  c4:	08 f0       	brcs	.+2      	; 0xc8 <main+0x2a>
				PORTC = SetBit(PORTC, 2, 1);
  c6:	42 9a       	sbi	0x08, 2	; 8
			}
			if (PINA >= 3) {
  c8:	80 b1       	in	r24, 0x00	; 0
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	08 f0       	brcs	.+2      	; 0xd0 <main+0x32>
				PORTC = SetBit(PORTC, 1, 1);
  ce:	41 9a       	sbi	0x08, 1	; 8
			}
			if (PINA >= 1) {
  d0:	80 b1       	in	r24, 0x00	; 0
  d2:	88 23       	and	r24, r24
  d4:	a9 f0       	breq	.+42     	; 0x100 <main+0x62>
				PORTC = SetBit(PORTC, 0, 1);
  d6:	40 9a       	sbi	0x08, 0	; 8
  d8:	13 c0       	rjmp	.+38     	; 0x100 <main+0x62>
			}
			
			for (unsigned char i = 4; i < 7; i++) {
				if (GetBit(PINA, i) == 0x01) {
  da:	80 b1       	in	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 2e       	mov	r0, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x48>
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <main+0x44>
  ea:	80 fd       	sbrc	r24, 0
					count++;
  ec:	4f 5f       	subi	r20, 0xFF	; 255
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
			}
			if (PINA >= 1) {
				PORTC = SetBit(PORTC, 0, 1);
			}
			
			for (unsigned char i = 4; i < 7; i++) {
  f2:	27 30       	cpi	r18, 0x07	; 7
  f4:	31 05       	cpc	r19, r1
  f6:	89 f7       	brne	.-30     	; 0xda <main+0x3c>
				if (GetBit(PINA, i) == 0x01) {
					count++;
				}
			}
			if (count == 2) {
  f8:	42 30       	cpi	r20, 0x02	; 2
  fa:	b1 f6       	brne	.-84     	; 0xa8 <main+0xa>
				PORTC = PORTC | 0x80;
  fc:	47 9a       	sbi	0x08, 7	; 8
  fe:	d4 cf       	rjmp	.-88     	; 0xa8 <main+0xa>
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}


int main(void)
{
 100:	24 e0       	ldi	r18, 0x04	; 4
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	e9 cf       	rjmp	.-46     	; 0xda <main+0x3c>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
