
gbers002_bzhan014_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a4  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024e  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	31 c0       	rjmp	.+98     	; 0xfe <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>


int main(void)
{
    DDRA = 0x00; PORTA = 0x00;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0x00;
  a2:	14 b8       	out	0x04, r1	; 4
  a4:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8
	unsigned char count = 0x00;
  ac:	60 e0       	ldi	r22, 0x00	; 0
		//PORTC = 0x00;
		PORTA = PINA;
		PORTB = PINB;
		if (count == 0)
		for (unsigned char i = 0; i < 8; i++) {
			if ((PORTA & (0x01 << i)) == (0x01 << i)) {
  ae:	e1 e0       	ldi	r30, 0x01	; 1
  b0:	f0 e0       	ldi	r31, 0x00	; 0
	DDRC = 0xFF; PORTC = 0x00;
	unsigned char count = 0x00;
    while (1) 
    {
		//PORTC = 0x00;
		PORTA = PINA;
  b2:	80 b1       	in	r24, 0x00	; 0
  b4:	82 b9       	out	0x02, r24	; 2
		PORTB = PINB;
  b6:	83 b1       	in	r24, 0x03	; 3
  b8:	85 b9       	out	0x05, r24	; 5
		if (count == 0)
  ba:	61 11       	cpse	r22, r1
  bc:	1e c0       	rjmp	.+60     	; 0xfa <main+0x5c>
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
		for (unsigned char i = 0; i < 8; i++) {
			if ((PORTA & (0x01 << i)) == (0x01 << i)) {
  c2:	82 b1       	in	r24, 0x02	; 2
  c4:	9f 01       	movw	r18, r30
  c6:	04 2e       	mov	r0, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x30>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x2c>
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	82 23       	and	r24, r18
  d6:	93 23       	and	r25, r19
  d8:	28 17       	cp	r18, r24
  da:	39 07       	cpc	r19, r25
  dc:	09 f4       	brne	.+2      	; 0xe0 <main+0x42>
				count++;
  de:	6f 5f       	subi	r22, 0xFF	; 255
			}
			if ((PORTB & (0x01 << i)) == (0x01 << i)) {
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	82 23       	and	r24, r18
  e6:	93 23       	and	r25, r19
  e8:	28 17       	cp	r18, r24
  ea:	39 07       	cpc	r19, r25
  ec:	09 f4       	brne	.+2      	; 0xf0 <main+0x52>
				count++;
  ee:	6f 5f       	subi	r22, 0xFF	; 255
  f0:	4f 5f       	subi	r20, 0xFF	; 255
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
    {
		//PORTC = 0x00;
		PORTA = PINA;
		PORTB = PINB;
		if (count == 0)
		for (unsigned char i = 0; i < 8; i++) {
  f4:	48 30       	cpi	r20, 0x08	; 8
  f6:	51 05       	cpc	r21, r1
  f8:	21 f7       	brne	.-56     	; 0xc2 <main+0x24>
			}
			if ((PORTB & (0x01 << i)) == (0x01 << i)) {
				count++;
			}
		}
		PORTC = count;
  fa:	68 b9       	out	0x08, r22	; 8
    }
  fc:	da cf       	rjmp	.-76     	; 0xb2 <main+0x14>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
